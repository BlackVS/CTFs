// check1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <stdint.h>
#include <stdio.h>
#include <string.h>


static uint8_t data[175] = {
  0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03,
  0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x03, 0x00, 0x03, 0x03, 0x03, 0x00, 0x01, 0x00, 0x02, 0x02, 0x02, 0x02, 0x01, 0x02, 0x00,
  0x01, 0x00, 0x02, 0x00, 0x01, 0x03, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01,
  0x03, 0x02, 0x02, 0x00, 0x01, 0x02, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x01,
  0x03, 0x01, 0x01, 0x00, 0x03, 0x01, 0x03, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x00,
  0x03, 0x00, 0x01, 0x00, 0x03, 0x01, 0x02, 0x00, 0x02, 0x03, 0x03, 0x00, 0x02, 0x03, 0x02, 0x00,
  0x02, 0x00, 0x03, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x02, 0x03, 0x01, 0x00,
  0x02, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01,
  0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, };


uint8_t buffer[175+2];

int dicts[24][4];

void
swap(int* a, int* b)
{
    int tmp;

    tmp = *a;
    *a = *b;
    *b = tmp;
}

void
compose_dicts(void)
{
    int map[4] = { 0, 1, 2, 3 };
    int i, j, k, l;
    int n = 0;

    for (i = 0; i < 4; ++i) {
        swap(map + i, map + 3);

        for (j = 0; j < 3; ++j) {
            swap(map + j, map + 2);

            for (k = 0; k < 2; ++k) {
                swap(map + k, map + 1);

                memcpy(&dicts[n++][0], map, 4 * sizeof(int));

                swap(map + k, map + 1);
            }

            swap(map + j, map + 2);
        }
        swap(map + i, map + 3);
    }
}

size_t
compose_buf(int dict, int offset)
{
    int q = 0;
    uint8_t b = 0;
    int i;
    size_t len = 0;

    for (i = offset; i < sizeof(data); ++i) {
        b |= dicts[dict][data[i]] << (6 - q);
        q += 2;

        if (q == 8) {
            buffer[len++] = b;
            b = q = 0;
        }
    }

    return len;
}

int
main(void)
{
    int i, off;
    size_t len;

    compose_dicts();

    for (off = 0; off < 4; ++off) {
        for (i = 0; i < 24; ++i) {
            len = compose_buf(i, off);
            fwrite(buffer, len, 1, stdout);
        }
    }

    return 0;
}